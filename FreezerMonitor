blueprint:
  name: Freezer Door Alert with Light Restore (Opening/Closed)
  description: >
    When a freezer door is in 'Opened' state longer than a configured delay, change the light color/brightness.
    When the door returns to 'Closed', restore original light state (on/off, color, brightness).
  domain: automation
  input:
    door_sensor:
      name: Freezer Door Sensor
      selector:
        entity:
          domain: binary_sensor
    light_entity:
      name: Light to Alert With
      selector:
        entity:
          domain: light
    delay_time:
      name: Delay Time (seconds)
      default: 60
      selector:
        number:
          min: 5
          max: 600
          unit_of_measurement: seconds
          mode: slider
    alert_color:
      name: Alert Color (RGB)
      default: [255, 0, 0]
      selector:
        color_rgb: {}
    alert_brightness:
      name: Alert Brightness (0â€“255)
      default: 200
      selector:
        number:
          min: 1
          max: 255
          mode: slider
    notify_device:
      name: Notify Device
      selector:
        device:
          integration: mobile_app

mode: restart
max_exceeded: silent

trigger:
  - platform: state
    entity_id: !input door_sensor
    to: 'Opened'

variables:
  light: !input light_entity
  alert_color: !input alert_color
  alert_brightness: !input alert_brightness
  notify_service: >
    notify.mobile_app_{{ device_attr('!input notify_device', 'name') | lower | replace(' ', '_') }}

action:
  - variables:
      light_state: "{{ states(light) }}"
      light_rgb: "{{ state_attr(light, 'rgb_color') }}"
      light_brightness: "{{ state_attr(light, 'brightness') }}"

  - wait_for_trigger:
      - platform: state
        entity_id: !input door_sensor
        to: 'Closed'
    timeout: !input delay_time
    continue_on_timeout: true

  - choose:
      - conditions:
          - condition: state
            entity_id: !input door_sensor
            state: 'Opened'
        sequence:
          - service: light.turn_on
            target:
              entity_id: "{{ light }}"
            data:
              rgb_color: "{{ alert_color }}"
              brightness: "{{ alert_brightness }}"
          - service: "{{ notify_service }}"
            data:
              title: "Freezer Door Left Open"
              message: "The freezer door has been in 'Opening' state for more than {{ delay_time }} seconds!"
      - conditions:
          - condition: state
            entity_id: !input door_sensor
            state: 'Closed'
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ light_state == 'on' }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: "{{ light }}"
                    data:
                      rgb_color: "{{ light_rgb }}"
                      brightness: "{{ light_brightness }}"
              - conditions:
                  - condition: template
                    value_template: "{{ light_state == 'off' }}"
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: "{{ light }}"
