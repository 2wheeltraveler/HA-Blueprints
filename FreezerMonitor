blueprint:
  name: Freezer Door Alert with Light Restore
  description: >
    When a freezer door stays open longer than a set time, turn on a light with a specified color and brightness.
    When the door is closed, return the light to its original state (on/off, color, brightness).
  domain: automation
  input:
    door_sensor:
      name: Freezer Door Sensor
      selector:
        entity:
          domain: binary_sensor
          device_class: door
    light_entity:
      name: Light to Alert With
      selector:
        entity:
          domain: light
    delay_time:
      name: Delay Time (seconds)
      default: 60
      selector:
        number:
          min: 5
          max: 600
          unit_of_measurement: seconds
          mode: slider
    alert_color:
      name: Alert Color (RGB)
      default: [255, 0, 0]
      selector:
        color_rgb: {}
    alert_brightness:
      name: Alert Brightness (0-255)
      default: 200
      selector:
        number:
          min: 1
          max: 255
          mode: slider
    notify_device:
      name: Notify Device
      selector:
        device:
          integration: mobile_app

mode: restart
max_exceeded: silent

trigger:
  - platform: state
    entity_id: !input door_sensor
    to: 'on'
  - platform: state
    entity_id: !input door_sensor
    to: 'off'

variables:
  light: !input light_entity
  alert_color: !input alert_color
  alert_brightness: !input alert_brightness
  notify_service: >
    notify.mobile_app_{{ device_attr('!input notify_device', 'name') | lower | replace(' ', '_') }}

  light_was_on: >
    {{ is_state(light, 'on') }}
  light_rgb: >
    {% set color = state_attr(light, 'rgb_color') %}
    {{ color if color is not none else [255, 255, 255] }}
  light_brightness: >
    {% set bright = state_attr(light, 'brightness') %}
    {{ bright if bright is not none else 255 }}

action:
  - choose:
      - conditions:
          - condition: trigger
            id: '0'  # door opened
          - condition: state
            entity_id: !input door_sensor
            state: 'on'
        sequence:
          - wait_for_trigger:
              - platform: state
                entity_id: !input door_sensor
                to: 'off'
            timeout: !input delay_time
            continue_on_timeout: true

          - choose:
              - conditions:
                  - condition: state
                    entity_id: !input door_sensor
                    state: 'on'
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: "{{ light }}"
                    data:
                      rgb_color: "{{ alert_color }}"
                      brightness: "{{ alert_brightness }}"
                  - service: "{{ notify_service }}"
                    data:
                      title: "Freezer Door Left Open"
                      message: "⚠️ The freezer door has been open for more than {{ delay_time }} seconds!"

      - conditions:
          - condition: trigger
            id: '1'  # door closed
          - condition: state
            entity_id: !input door_sensor
            state: 'off'
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ light_was_on }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: "{{ light }}"
                    data:
                      rgb_color: "{{ light_rgb }}"
                      brightness: "{{ light_brightness }}"
              - conditions:
                  - condition: template
                    value_template: "{{ not light_was_on }}"
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: "{{ light }}"
